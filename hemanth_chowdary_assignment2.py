# -*- coding: utf-8 -*-
"""Hemanth chowdary  Assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hAZpOYCTpMiUTBVGvgwcOlOmPbZJgcpb
"""

df=pd.read_csv("Churn_Modelling.csv")

import pandas as pd

import numpy as np

df

"""**Visualizations**"""

import matplotlib.pyplot as plt

import seaborn as sns

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

df[['RowNumber', 'CustomerId', 'Surname', 'CreditScore', 'Geography',
       'Gender', 'Age', 'Tenure']].describe()

"""**[1]Univariate Analysis**"""

sns.histplot(df.Geography,kde=True)

# plot count plot for the gender column

sns.countplot(df.Gender)

"""**[2]Bi - Variate Analysis**"""

df[['RowNumber', 'CustomerId', 'Surname', 'CreditScore', 'Geography',
       'Gender', 'Age', 'Tenure']].corr()

sns.scatterplot(df.CreditScore,df.Age)
plt.ylim(0,150)

"""**[3]Multi - Variate Analysis**"""

sns.pairplot(data=df[['CustomerId', 'Surname', 'CreditScore', 'Geography','Gender', 'Age', 'Tenure']],hue='Tenure')

"""**[4] Descriptive statistics**"""

# summary statistics 
df.describe()

df.dtypes

# mode
df['Age'].mode()

# calculation of the mean 
df["Age"].mean()

# calculation of the mean and round the result
round(df["Age"].mean(), 3)

# calculation of the median 
df["Age"].median()

"""**[5]Handling Missing Values**"""

df.isna().any()

df.isnull().sum()

df.isnull()

df.notnull()

"""**[6]Find the outliers and replace the outliers**"""

sns.boxplot(x=df['Age'])

sns.boxplot(x=df['Tenure'])

"""**[7]Check for Categorical columns and perform encoding.**"""

a=df.columns

b=df._get_numeric_data().columns

b

list(set(a) - set(b))

"""**[8] Split the data into dependent and independent variables.**"""

# x  -Independent
# y  -Dependent
x =df.drop('Exited',axis=1)
y=df['Exited']

x.head()

y.head()

"""**[9] Scale the independent variables**"""

from sklearn import linear_model

from sklearn.preprocessing import StandardScaler

scale = StandardScaler()

x=df[['Age','Tenure']]

scaledx = scale.fit_transform(x)

print(scaledx)

"""**[10] Split the data into training and testing**"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)

print('X Train shape:{},Y.Train SHape:{}'.format(x_train.shape,y_train.shape))

print('X Test Shape :{},Y Test SHape:{}'.format(x_test.shape,y_test.shape))